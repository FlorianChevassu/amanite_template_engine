#include "../include/ATE.h"
#include <iostream>
#include <list>
#include <string>
#include "json11.hpp"

struct JsonContext{
	const json11::Json* m_json;
	const JsonContext* m_parent;
	JsonContext() : m_json(nullptr), m_parent(nullptr){}
	JsonContext(const json11::Json& json) : m_json(&json), m_parent(nullptr){}
	JsonContext(const json11::Json& json, const JsonContext& parent) : m_json(&json), m_parent(&parent){}
	
	JsonContext operator[](const std::string& key) const{
		if(m_json != nullptr)
			return JsonContext((*m_json)[key], *this);
		else
			return JsonContext();
	}
	JsonContext get(const std::string& key) const{
		if(m_json != nullptr)
			return JsonContext((*m_json)[key], *this);
		else
			return JsonContext();
	}
	
	JsonContext getParentContext() const{
		if(m_parent != nullptr)
			return *m_parent;
		else
			return JsonContext();
	}
	
	std::string string_value() const{
		if(m_json != nullptr)
			return m_json->string_value();
		else
			return "";
	}
	
	std::string dump() const{
		if(m_json != nullptr)
			return m_json->dump();
		else
			return "";
	}
	
	bool is_array() const{
		if(m_json != nullptr)
			return m_json->is_array();
		else
			return false;
	}
	
	bool is_object() const{
		if(m_json != nullptr)
			return m_json->is_array();
		else
			return false;
	}
	
	//be carefull... call is_array before !
	const json11::Json::array& array_items() const{
		return m_json->array_items();
	}
};

int main(){
	ATE::TemplateEngine te;

	te.registerContext<JsonContext>();
	std::list<ATE::Node> res = te.compile("FlorianChevassu/ATE/tests/test1.mustache");

	//assert(res.size() == 3);
	
	json11::Json data = json11::Json::object {
		{ "name", "Florian" },
		{ "city", "Lyon" },
		{"family", json11::Json::object {
						{"name", "Chevassu"},
						{"brothers", json11::Json::array{
										json11::Json::object { {"name", "Jo"} },
										json11::Json::object { {"name", "CÃ©cile"} },
									}
						}
					}
				}
		};
	
	te.render(JsonContext(data), std::cout, res);


	return 0;
}
